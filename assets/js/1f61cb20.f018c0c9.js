"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7728],{3905:(e,a,t)=>{t.r(a),t.d(a,{MDXContext:()=>c,MDXProvider:()=>p,mdx:()=>h,useMDXComponents:()=>m,withMDXComponents:()=>o});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function d(){return d=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},d.apply(this,arguments)}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},d=Object.keys(e);for(r=0;r<d.length;r++)t=d[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(r=0;r<d.length;r++)t=d[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=r.createContext({}),o=function(e){return function(a){var t=m(a.components);return r.createElement(e,d({},a,{components:t}))}},m=function(e){var a=r.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},p=function(e){var a=m(e.components);return r.createElement(c.Provider,{value:a},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},f=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,d=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),o=m(t),p=n,u=o["".concat(l,".").concat(p)]||o[p]||g[p]||d;return t?r.createElement(u,s(s({ref:a},c),{},{components:t})):r.createElement(u,s({ref:a},c))}));function h(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var d=t.length,l=new Array(d);l[0]=f;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[u]="string"==typeof e?e:n,l[1]=s;for(var c=2;c<d;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8865:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>c});var r=t(87462),n=(t(67294),t(3905));const d={id:"cmd_args"},l="cmd_args type",s={unversionedId:"api/build/cmd_args",id:"api/build/cmd_args",title:"cmd_args type",description:"The cmdargs type is created by cmdargs() and is consumed by ctx.actions.run. The type is a mutable collection of strings and artifact values. In general, command lines, artifacts, strings, RunInfo and lists thereof can be added to or used to construct a `cmd_args value. All these methods operate mutably on cmd and return that value too.",source:"@site/../docs/api/build/cmd_args.generated.md",sourceDirName:"api/build",slug:"/api/build/cmd_args",permalink:"/docs/api/build/cmd_args",draft:!1,tags:[],version:"current",frontMatter:{id:"cmd_args"},sidebar:"manualSidebar",previous:{title:"build",permalink:"/docs/api/build/build"},next:{title:"ctx.actions type",permalink:"/docs/api/build/ctx.actions"}},i={},c=[{value:"cmd_args.absolute_prefix",id:"cmd_argsabsolute_prefix",level:2},{value:"cmd_args.absolute_suffix",id:"cmd_argsabsolute_suffix",level:2},{value:"cmd_args.add",id:"cmd_argsadd",level:2},{value:"cmd_args.copy",id:"cmd_argscopy",level:2},{value:"cmd_args.hidden",id:"cmd_argshidden",level:2},{value:"cmd_args.ignore_artifacts",id:"cmd_argsignore_artifacts",level:2},{value:"cmd_args.inputs",id:"cmd_argsinputs",level:2},{value:"cmd_args.outputs",id:"cmd_argsoutputs",level:2},{value:"cmd_args.parent",id:"cmd_argsparent",level:2},{value:"Details",id:"details",level:4},{value:"cmd_args.relative_to",id:"cmd_argsrelative_to",level:2},{value:"cmd_args.replace_regex",id:"cmd_argsreplace_regex",level:2}],o={toc:c};function m(e){let{components:a,...t}=e;return(0,n.mdx)("wrapper",(0,r.Z)({},o,t,{components:a,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"cmd_args-type"},(0,n.mdx)("inlineCode",{parentName:"h1"},"cmd_args")," type"),(0,n.mdx)("p",null,"The ",(0,n.mdx)("inlineCode",{parentName:"p"},"cmd_args")," type is created by ",(0,n.mdx)("inlineCode",{parentName:"p"},"cmd_args()")," and is consumed by ",(0,n.mdx)("inlineCode",{parentName:"p"},"ctx.actions.run"),". The type is a mutable collection of strings and ",(0,n.mdx)("inlineCode",{parentName:"p"},"artifact")," values. In general, command lines, artifacts, strings, ",(0,n.mdx)("inlineCode",{parentName:"p"},"RunInfo")," and lists thereof can be added to or used to construct a `",(0,n.mdx)("inlineCode",{parentName:"p"},"cmd_args")," value. All these methods operate mutably on ",(0,n.mdx)("inlineCode",{parentName:"p"},"cmd")," and return that value too."),(0,n.mdx)("h2",{id:"cmd_argsabsolute_prefix"},"cmd_args.absolute_prefix"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args.absolute_prefix(prefix: str.type) -> ""\n')),(0,n.mdx)("p",null,"Adds a prefix to the end of every artifact"),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argsabsolute_suffix"},"cmd_args.absolute_suffix"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args.absolute_suffix(suffix: str.type) -> ""\n')),(0,n.mdx)("p",null,"Adds a suffix to the front of every artifact"),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argsadd"},"cmd_args.add"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args.add(*args) -> ""\n')),(0,n.mdx)("p",null,"A list of arguments to be added to the command line, as per ",(0,n.mdx)("inlineCode",{parentName:"p"},"cmd_args")),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argscopy"},"cmd_args.copy"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args.copy() -> "cmd_args"\n')),(0,n.mdx)("p",null,"Returns a copy of the ",(0,n.mdx)("inlineCode",{parentName:"p"},"cmd_args")," such that any modifications to the original or the returned value will not impact each other"),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argshidden"},"cmd_args.hidden"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args.hidden(*args) -> ""\n')),(0,n.mdx)("p",null,"Things to add to the command line which do not show up but are added as dependencies"),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argsignore_artifacts"},"cmd_args.ignore_artifacts"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args.ignore_artifacts() -> ""\n')),(0,n.mdx)("p",null,"Conceptually the opposite of ",(0,n.mdx)("inlineCode",{parentName:"p"},"hidden()"),". It causes none of the arguments of the command line to be added as dependencies. Use this if you need the path to an artifact but not the artifact itself. Note: if you do find yourself needing any of the inputs referenced by this command, you will hit build errors due to missing dependencies."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argsinputs"},"cmd_args.inputs"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'cmd_args.inputs: "command_line_inputs"\n')),(0,n.mdx)("p",null,"Collect all the inputs (including hidden) referenced by this command line."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argsoutputs"},"cmd_args.outputs"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'cmd_args.outputs: ["output_artifact"]\n')),(0,n.mdx)("p",null,"Collect all the outputs (including hidden) referenced by this command line."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argsparent"},"cmd_args.parent"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args.parent(count: int.type = None) -> ""\n')),(0,n.mdx)("p",null,"For all the artifacts listed in this ",(0,n.mdx)("inlineCode",{parentName:"p"},"cmd_args"),", use their parent directory."),(0,n.mdx)("h4",{id:"details"},"Details"),(0,n.mdx)("p",null,"Typically used when the file name is passed one way, and the directory another,\ne.g. ",(0,n.mdx)("inlineCode",{parentName:"p"},'cmd_args(artifact, format="-L{}").parent()'),"."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argsrelative_to"},"cmd_args.relative_to"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args.relative_to(directory: "", parent: int.type = None) -> ""\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cmd_argsreplace_regex"},"cmd_args.replace_regex"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cmd_args.replace_regex(pattern: str.type, replacement: str.type) -> ""\n')),(0,n.mdx)("p",null,"Replaces all parts matching pattern regular expression in each argument with replacement string. Several replacements can be added by multiple replace_regex calls."))}m.isMDXComponent=!0}}]);