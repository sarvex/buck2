"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5587],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>d,MDXProvider:()=>o,mdx:()=>y,useMDXComponents:()=>p,withMDXComponents:()=>s});var l=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&(e[l]=r[l])}return e},a.apply(this,arguments)}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,l,n=function(e,t){if(null==e)return{};var r,l,n={},a=Object.keys(e);for(l=0;l<a.length;l++)r=a[l],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)r=a[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=l.createContext({}),s=function(e){return function(t){var r=p(t.components);return l.createElement(e,a({},t,{components:r}))}},p=function(e){var t=l.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},o=function(e){var t=p(e.components);return l.createElement(d.Provider,{value:t},e.children)},x="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},f=l.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,u=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),s=p(r),o=n,x=s["".concat(u,".").concat(o)]||s[o]||m[o]||a;return r?l.createElement(x,i(i({ref:t},d),{},{components:r})):l.createElement(x,i({ref:t},d))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,u=new Array(a);u[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[x]="string"==typeof e?e:n,u[1]=i;for(var d=2;d<a;d++)u[d]=r[d];return l.createElement.apply(null,u)}return l.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3859:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var l=r(87462),n=(r(67294),r(3905));const a={id:"cqueryctx"},u="cqueryctx type",i={unversionedId:"api/bxl/cqueryctx",id:"api/bxl/cqueryctx",title:"cqueryctx type",description:"The context for performing cquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command.",source:"@site/../docs/api/bxl/cqueryctx.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/cqueryctx",permalink:"/docs/api/bxl/cqueryctx",draft:!1,tags:[],version:"current",frontMatter:{id:"cqueryctx"},sidebar:"manualSidebar",previous:{title:"configured_attr_val type",permalink:"/docs/api/bxl/configured_attr_val"},next:{title:"ensured_artifact type",permalink:"/docs/api/bxl/ensured_artifact"}},c={},d=[{value:"cqueryctx.allpaths",id:"cqueryctxallpaths",level:2},{value:"cqueryctx.attrfilter",id:"cqueryctxattrfilter",level:2},{value:"cqueryctx.attrregexfilter",id:"cqueryctxattrregexfilter",level:2},{value:"Details",id:"details",level:4},{value:"cqueryctx.buildfile",id:"cqueryctxbuildfile",level:2},{value:"Details",id:"details-1",level:4},{value:"cqueryctx.deps",id:"cqueryctxdeps",level:2},{value:"Details",id:"details-2",level:4},{value:"cqueryctx.eval",id:"cqueryctxeval",level:2},{value:"Details",id:"details-3",level:4},{value:"cqueryctx.filter",id:"cqueryctxfilter",level:2},{value:"Details",id:"details-4",level:4},{value:"cqueryctx.inputs",id:"cqueryctxinputs",level:2},{value:"Details",id:"details-5",level:4},{value:"cqueryctx.kind",id:"cqueryctxkind",level:2},{value:"Details",id:"details-6",level:4},{value:"cqueryctx.owner",id:"cqueryctxowner",level:2},{value:"Details",id:"details-7",level:4},{value:"cqueryctx.rdeps",id:"cqueryctxrdeps",level:2},{value:"Details",id:"details-8",level:4},{value:"cqueryctx.somepath",id:"cqueryctxsomepath",level:2},{value:"cqueryctx.testsof",id:"cqueryctxtestsof",level:2},{value:"cqueryctx.testsof_with_default_target_platform",id:"cqueryctxtestsof_with_default_target_platform",level:2}],s={toc:d};function p(e){let{components:t,...r}=e;return(0,n.mdx)("wrapper",(0,l.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"cqueryctx-type"},(0,n.mdx)("inlineCode",{parentName:"h1"},"cqueryctx")," type"),(0,n.mdx)("p",null,"The context for performing ",(0,n.mdx)("inlineCode",{parentName:"p"},"cquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within cquery command."),(0,n.mdx)("p",null,"Query results are ",(0,n.mdx)("inlineCode",{parentName:"p"},"[StarlarkTargetSet]"),"s of ",(0,n.mdx)("inlineCode",{parentName:"p"},"[ConfiguredTargetNod]"),"s, which supports iteration,\nindexing, ",(0,n.mdx)("inlineCode",{parentName:"p"},"len()"),", set addition/subtraction, and ",(0,n.mdx)("inlineCode",{parentName:"p"},"equals()"),"."),(0,n.mdx)("h2",{id:"cqueryctxallpaths"},"cqueryctx.allpaths"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.allpaths(from: "", to: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The ",(0,n.mdx)("inlineCode",{parentName:"p"},"allpaths")," query for computing all dependency paths."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxattrfilter"},"cqueryctx.attrfilter"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.attrfilter(attr: str.type, value: str.type, targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The attrfilter query for rule attribute filtering."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxattrregexfilter"},"cqueryctx.attrregexfilter"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.attrregexfilter(attribute: str.type, value: str.type, targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The attrregexfilter query for rule attribute filtering with regex."),(0,n.mdx)("h4",{id:"details"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attrregexfilter(ctx):\n    filtered = ctx.cquery().attrregexfilter("foo", "he.lo", "bin/kind/...")\n    ctx.output.print(filtered)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxbuildfile"},"cqueryctx.buildfile"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.buildfile(targets: "") -> "file_set"\n')),(0,n.mdx)("p",null,"Find the build file(s) that defines a target or a target set."),(0,n.mdx)("h4",{id:"details-1"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _buildfile_impl(ctx):\n    owner = ctx.cquery().owner(["bin/TARGET", "bin/kind"])\n    result = ctx.cquery().buildfile(owner)\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxdeps"},"cqueryctx.deps"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.deps(universe: "", depth: [None, int.type] = None, filter: [None, str.type] = None) -> "target_set"\n')),(0,n.mdx)("p",null,"The deps query for finding the transitive closure of dependencies."),(0,n.mdx)("h4",{id:"details-2"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_deps(ctx):\n    result = ctx.cquery().deps("root//bin:the_binary", 1)\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxeval"},"cqueryctx.eval"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.eval(query: str.type, query_args: [None, ""] = None, target_universe: [None, [str.type]] = None) -> ""\n')),(0,n.mdx)("p",null,"Evaluates some general query string. ",(0,n.mdx)("inlineCode",{parentName:"p"},"query_args")," can be a target_set of unconfigured nodes, or a list of strings."),(0,n.mdx)("h4",{id:"details-3"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result1 = ctx.cquery().eval("inputs(root//bin:the_binary)")\n    ctx.output.print(result1)\n\n    result2 = ctx.cquery().eval("inputs(%s)", query_args = ["cell//path/to/file:target"])\n    ctx.output.print(result2)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxfilter"},"cqueryctx.filter"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.filter(regex: str.type, targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The filter query for filtering targets by name."),(0,n.mdx)("h4",{id:"details-4"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_filter(ctx):\n    result = ctx.cquery().filter(".*the_binary", "root//...")\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxinputs"},"cqueryctx.inputs"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.inputs(targets: "") -> "file_set"\n')),(0,n.mdx)("p",null,"The inputs query for finding input files."),(0,n.mdx)("h4",{id:"details-5"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_inputs(ctx):\n    result = ctx.cquery().inputs("root//bin:the_binary")\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxkind"},"cqueryctx.kind"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.kind(regex: str.type, targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The kind query for filtering targets by rule type."),(0,n.mdx)("h4",{id:"details-6"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_kind(ctx):\n    kind = ctx.cquery().kind(".*1", "bin/kind/...")\n    ctx.output.print(kind)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxowner"},"cqueryctx.owner"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.owner(files: [str.type, "file_set"]) -> "target_set"\n')),(0,n.mdx)("p",null,"The owner query for finding targets that own specified files."),(0,n.mdx)("h4",{id:"details-7"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _owner_impl(ctx):\n    owner = ctx.cquery().owner("bin/TARGETS.fixture")\n    ctx.output.print(owner)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxrdeps"},"cqueryctx.rdeps"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.rdeps(universe: "", from: "", depth: [None, int.type] = None) -> "target_set"\n')),(0,n.mdx)("p",null,"The rdeps query for finding the transitive closure of reverse dependencies."),(0,n.mdx)("h4",{id:"details-8"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rdeps(ctx):\n    result = ctx.cquery().rdeps("root//bin:the_binary", "//lib:file1", 100)\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxsomepath"},"cqueryctx.somepath"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.somepath(from: "", to: "") -> "target_set"\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxtestsof"},"cqueryctx.testsof"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.testsof(targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The testsof query for listing the tests of the specified targets."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"cqueryctxtestsof_with_default_target_platform"},"cqueryctx.testsof_with_default_target_platform"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def cqueryctx.testsof_with_default_target_platform(targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The testsof query for listing the tests of the specified targets. Performs default target platform resolution under the hood for the tests found."))}p.isMDXComponent=!0}}]);