"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4041],{3905:(n,e,t)=>{t.r(e),t.d(e,{MDXContext:()=>f,MDXProvider:()=>l,mdx:()=>v,useMDXComponents:()=>c,withMDXComponents:()=>p});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(){return i=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},i.apply(this,arguments)}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function u(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var f=r.createContext({}),p=function(n){return function(e){var t=c(e.components);return r.createElement(n,i({},e,{components:t}))}},c=function(n){var e=r.useContext(f),t=e;return n&&(t="function"==typeof n?n(e):u(u({},e),n)),t},l=function(n){var e=c(n.components);return r.createElement(f.Provider,{value:e},n.children)},d="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},g=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,a=n.parentName,f=s(n,["components","mdxType","originalType","parentName"]),p=c(t),l=o,d=p["".concat(a,".").concat(l)]||p[l]||m[l]||i;return t?r.createElement(d,u(u({ref:e},f),{},{components:t})):r.createElement(d,u({ref:e},f))}));function v(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,a=new Array(i);a[0]=g;var u={};for(var s in e)hasOwnProperty.call(e,s)&&(u[s]=e[s]);u.originalType=n,u[d]="string"==typeof n?n:o,a[1]=u;for(var f=2;f<i;f++)a[f]=t[f];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},21137:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>f});var r=t(87462),o=(t(67294),t(3905));const i={id:"ConfigurationInfo"},a="ConfigurationInfo type",u={unversionedId:"api/build/providers/ConfigurationInfo",id:"api/build/providers/ConfigurationInfo",title:"ConfigurationInfo type",description:'Provider that signals that a rule contains configuration info. This is used both as part of defining configurations (platform(), constraintvalue()) and defining whether a target "matches" a configuration or not (configsetting(), constraint_value())',source:"@site/../docs/api/build/providers/ConfigurationInfo.generated.md",sourceDirName:"api/build/providers",slug:"/api/build/providers/ConfigurationInfo",permalink:"/docs/api/build/providers/ConfigurationInfo",draft:!1,tags:[],version:"current",frontMatter:{id:"ConfigurationInfo"},sidebar:"manualSidebar",previous:{title:"promise type",permalink:"/docs/api/build/promise"},next:{title:"ConstraintSettingInfo type",permalink:"/docs/api/build/providers/ConstraintSettingInfo"}},s={},f=[{value:"ConfigurationInfo.constraints",id:"configurationinfoconstraints",level:2},{value:"ConfigurationInfo.values",id:"configurationinfovalues",level:2}],p={toc:f};function c(n){let{components:e,...t}=n;return(0,o.mdx)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"configurationinfo-type"},(0,o.mdx)("inlineCode",{parentName:"h1"},"ConfigurationInfo")," type"),(0,o.mdx)("p",null,"Provider that signals that a rule contains configuration info. This is used both as part of defining configurations (",(0,o.mdx)("inlineCode",{parentName:"p"},"platform()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"constraint_value()"),') and defining whether a target "matches" a configuration or not (',(0,o.mdx)("inlineCode",{parentName:"p"},"config_setting()"),", ",(0,o.mdx)("inlineCode",{parentName:"p"},"constraint_value()"),")"),(0,o.mdx)("h2",{id:"configurationinfoconstraints"},"ConfigurationInfo.constraints"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'ConfigurationInfo.constraints: {"target_label": "ConstraintValueInfo"}\n')),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"configurationinfovalues"},"ConfigurationInfo.values"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"ConfigurationInfo.values: {str.type: str.type}\n")))}c.isMDXComponent=!0}}]);