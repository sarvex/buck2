"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1089],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>m,withMDXComponents:()=>c});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),c=function(e){return function(t){var n=m(t.components);return a.createElement(e,r({},t,{components:n}))}},m=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=m(n),p=i,u=c["".concat(o,".").concat(p)]||c[p]||x[p]||r;return n?a.createElement(u,l(l({ref:t},d),{},{components:n})):a.createElement(u,l({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},18953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={id:"ctx.actions"},o="ctx.actions type",l={unversionedId:"api/build/ctx.actions",id:"api/build/ctx.actions",title:"ctx.actions type",description:"Actions take inputs and produce outputs. Most output filenames can either be artifacts created with declare_output or strings that are implicitly converted to output artifacts.",source:"@site/../docs/api/build/ctx.actions.generated.md",sourceDirName:"api/build",slug:"/api/build/ctx.actions",permalink:"/docs/api/build/ctx.actions",draft:!1,tags:[],version:"current",frontMatter:{id:"ctx.actions"},sidebar:"manualSidebar",previous:{title:"cmd_args type",permalink:"/docs/api/build/cmd_args"},next:{title:"ctx type",permalink:"/docs/api/build/ctx"}},s={},d=[{value:"ctx.actions.anon_target",id:"ctxactionsanon_target",level:2},{value:"ctx.actions.anon_targets",id:"ctxactionsanon_targets",level:2},{value:"ctx.actions.artifact_tag",id:"ctxactionsartifact_tag",level:2},{value:"ctx.actions.cas_artifact",id:"ctxactionscas_artifact",level:2},{value:"Details",id:"details",level:4},{value:"ctx.actions.copied_dir",id:"ctxactionscopied_dir",level:2},{value:"ctx.actions.copy_dir",id:"ctxactionscopy_dir",level:2},{value:"ctx.actions.copy_file",id:"ctxactionscopy_file",level:2},{value:"ctx.actions.declare_output",id:"ctxactionsdeclare_output",level:2},{value:"Details",id:"details-1",level:4},{value:"ctx.actions.download_file",id:"ctxactionsdownload_file",level:2},{value:"ctx.actions.dynamic_output",id:"ctxactionsdynamic_output",level:2},{value:"ctx.actions.run",id:"ctxactionsrun",level:2},{value:"Details",id:"details-2",level:4},{value:"ctx.actions.symlink_dir",id:"ctxactionssymlink_dir",level:2},{value:"ctx.actions.symlink_file",id:"ctxactionssymlink_file",level:2},{value:"ctx.actions.symlinked_dir",id:"ctxactionssymlinked_dir",level:2},{value:"ctx.actions.tset",id:"ctxactionstset",level:2},{value:"ctx.actions.write",id:"ctxactionswrite",level:2},{value:"Details",id:"details-3",level:4},{value:"ctx.actions.write_json",id:"ctxactionswrite_json",level:2},{value:"Details",id:"details-4",level:4}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"ctxactions-type"},(0,i.mdx)("inlineCode",{parentName:"h1"},"ctx.actions")," type"),(0,i.mdx)("p",null,"Actions take inputs and produce outputs. Most output filenames can either be artifacts created with ",(0,i.mdx)("inlineCode",{parentName:"p"},"declare_output")," or strings that are implicitly converted to output artifacts."),(0,i.mdx)("h2",{id:"ctxactionsanon_target"},"ctx.actions.anon_target"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.anon_target(rule: "rule", attrs: {str.type: ""}) -> "promise"\n')),(0,i.mdx)("p",null,"Generate an anonymous target"),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionsanon_targets"},"ctx.actions.anon_targets"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.anon_targets(rules: [("rule", {str.type: ""})]) -> "promise"\n')),(0,i.mdx)("p",null,"Generate a series of anonymous targets"),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionsartifact_tag"},"ctx.actions.artifact_tag"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.artifact_tag() -> "artifact_tag"\n')),(0,i.mdx)("p",null,"Allocate a new input tag"),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionscas_artifact"},"ctx.actions.cas_artifact"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.cas_artifact(\n    output: "",\n    digest: str.type,\n    use_case: str.type,\n    *,\n    expires_after_timestamp: int.type,\n    is_executable: bool.type = None,\n    is_tree: bool.type = None,\n    is_directory: bool.type = None\n) -> ""\n')),(0,i.mdx)("p",null,"Downloads a CAS artifact to an output"),(0,i.mdx)("h4",{id:"details"},"Details"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"digest"),": must look like ",(0,i.mdx)("inlineCode",{parentName:"li"},"SHA1:SIZE")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"use_case"),": your RE use case"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"expires_after_timestamp"),": must be a UNIX timestamp. Your digest's TTL must exceed this timestamp. Your build will break once the digest expires, so make sure the expiry is long enough (preferably, in years)."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"is_executable")," (optional): indicates the resulting file should be marked with executable permissions")),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionscopied_dir"},"ctx.actions.copied_dir"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.copied_dir(output: "", srcs: "") -> ""\n')),(0,i.mdx)("p",null,"Returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," which is a directory containing copied files. The srcs must be a dictionary of path (as string, relative to the result directory) to the bound ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),", which will be laid out in the directory."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionscopy_dir"},"ctx.actions.copy_dir"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.copy_dir(dest: "", src: "") -> ""\n')),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionscopy_file"},"ctx.actions.copy_file"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.copy_file(dest: "", src: "") -> ""\n')),(0,i.mdx)("p",null,"Copies the source ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," to the destination (which can be a string representing a filename or an output ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),") and returns the output ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),". The copy works for files or directories."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionsdeclare_output"},"ctx.actions.declare_output"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.declare_output(\n    prefix: str.type,\n    filename: [None, str.type] = None,\n    *,\n    dir: bool.type = None\n) -> "artifact"\n')),(0,i.mdx)("p",null,"Returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," with the name filename, which when asked for its name, will return filename (which may include a directory portion)"),(0,i.mdx)("h4",{id:"details-1"},"Details"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"prefix")," (optional): provides a silent part of the filename, which can be used to disambiguate but whose presence will not be visible to anyone using the ",(0,i.mdx)("inlineCode",{parentName:"li"},"artifact"),". By default, outputs are considered files; pass ",(0,i.mdx)("inlineCode",{parentName:"li"},"dir = True")," to indicate it is a directory")),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionsdownload_file"},"ctx.actions.download_file"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.download_file(\n    output: "",\n    url: str.type,\n    *,\n    sha1: [None, str.type] = None,\n    sha256: [None, str.type] = None,\n    is_executable: bool.type = None,\n    is_deferrable: bool.type = None\n) -> ""\n')),(0,i.mdx)("p",null,"Downloads a URL to an output (filename as string or output artifact). The file at the URL must have the given sha1 or the command will fail. The optional parameter is_executable indicates whether the resulting file should be marked with executable permissions."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionsdynamic_output"},"ctx.actions.dynamic_output"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.dynamic_output(\n    *,\n    dynamic: ["artifact"],\n    inputs: ["artifact"],\n    outputs: ["output_artifact"],\n    f: ""\n) -> None\n')),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionsrun"},"ctx.actions.run"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.run(\n    arguments: "",\n    *,\n    category: str.type,\n    identifier: [None, str.type] = None,\n    env: [None, {str.type: ""}] = None,\n    local_only: bool.type = None,\n    prefer_local: bool.type = None,\n    prefer_remote: bool.type = None,\n    always_print_stderr: bool.type = None,\n    weight: [None, int.type] = None,\n    weight_percentage: [None, int.type] = None,\n    dep_files: [None, {str.type: ""}] = None,\n    metadata_env_var: [None, str.type] = None,\n    metadata_path: [None, str.type] = None,\n    no_outputs_cleanup: bool.type = None,\n    allow_cache_upload: bool.type = None,\n    force_full_hybrid_if_capable: bool.type = None\n) -> None\n')),(0,i.mdx)("p",null,"Runs a command"),(0,i.mdx)("h4",{id:"details-2"},"Details"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"arguments"),": must be of type ",(0,i.mdx)("inlineCode",{parentName:"li"},"cmd_args"),", or a type convertible to such (such as a list of strings and artifacts) and must contain at least one ",(0,i.mdx)("inlineCode",{parentName:"li"},".as_output()")," artifact"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"category"),": category and identifier - when used together, identify the action in Buck2's event stream, and must be unique for a given target"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"weight"),": used to note how heavy the command is and will typically be set to a higher value to indicate that less such commands should be run in parallel (if running locally)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"no_outputs_cleanup"),": if this flag is set then Buck2 won't clean the outputs of a previous build that might be present on a disk; in which case, command from arguments should be responsible for the cleanup (that is useful, for example, when an action is supporting incremental mode and its outputs are based on result from a previous build)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_env_var")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"meadata_path")," should be used together: both set or both unset",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_path"),": defines a path relative to the result directory for a file with action metadata, which will be created right before the command will be run."),(0,i.mdx)("li",{parentName:"ul"},"Metadata contains the path relative to the Buck2 project root and hash digest for every action input (this excludes symlinks as they could be resolved by a user script if needed). The resolved path relative to the Buck2 project for the metadata file will be passed to command from arguments, via the environment variable, with its name set by ",(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_env_var")),(0,i.mdx)("li",{parentName:"ul"},"Both ",(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_env_var")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"metadata_path")," are useful when making actions behave in an incremental manner (for details, see ",(0,i.mdx)("a",{parentName:"li",href:"https://buck2.build/docs/rule_authors/incremental_actions/"},"Incremental Actions"),")")))),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionssymlink_dir"},"ctx.actions.symlink_dir"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.symlink_dir(dest: "", src: "") -> ""\n')),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionssymlink_file"},"ctx.actions.symlink_file"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.symlink_file(dest: "", src: "") -> ""\n')),(0,i.mdx)("p",null,"Creates a symlink to the source ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," at the destination (which can be a string representing a filename or an output ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),") and returns the output ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),". The symlink works for files or directories."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionssymlinked_dir"},"ctx.actions.symlinked_dir"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.symlinked_dir(output: "", srcs: "") -> ""\n')),(0,i.mdx)("p",null,"Returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," that is a directory containing symlinks. The srcs must be a dictionary of path (as string, relative to the result directory) to bound ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact"),", which will be laid out in the directory."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionstset"},"ctx.actions.tset"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.tset(definition: "", value: [None, ""] = None, children: [None, ""] = None) -> ""\n')),(0,i.mdx)("p",null,"Creates a new transitive set (for details, see ",(0,i.mdx)("a",{parentName:"p",href:"https://buck2.build/docs/rule_authors/transitive_sets/"},"https://buck2.build/docs/rule_authors/transitive_sets/"),")."),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionswrite"},"ctx.actions.write"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.write(\n    output: "",\n    content: "",\n    *,\n    is_executable: bool.type = None,\n    allow_args: bool.type = None,\n    with_inputs: bool.type = None\n) -> ""\n')),(0,i.mdx)("p",null,"Returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," whose contents are content"),(0,i.mdx)("h4",{id:"details-3"},"Details"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"is_executable")," (optional): indicates whether the resulting file should be marked with executable permissions"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"allow_args")," (optional): must be set to ",(0,i.mdx)("inlineCode",{parentName:"li"},"True")," if you want to write parameter arguments to the file (in particular, macros that write to file)",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"If it is true, the result will be a pair of the ",(0,i.mdx)("inlineCode",{parentName:"li"},"artifact")," containing content and a list of artifact values that were written by macros, which should be used in hidden fields or similar")))),(0,i.mdx)("hr",null),(0,i.mdx)("h2",{id:"ctxactionswrite_json"},"ctx.actions.write_json"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def ctx.actions.write_json(\n    output: "",\n    content: "",\n    *,\n    with_inputs: bool.type = None\n) -> ""\n')),(0,i.mdx)("p",null,"Returns an ",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact")," whose contents are content written as a JSON value"),(0,i.mdx)("h4",{id:"details-4"},"Details"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"filename"),": can be a string, or an existing artifact created with ",(0,i.mdx)("inlineCode",{parentName:"li"},"declare_output")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"content"),":  must be composed of the basic json types (Boolean, number, string, list/tuple, dictionary) plus artifacts and command lines",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"An artifact will be written as a string containing the path"),(0,i.mdx)("li",{parentName:"ul"},"A command line will be written as a list of strings, unless ",(0,i.mdx)("inlineCode",{parentName:"li"},"joined=True")," is set, in which case it will be a string"))),(0,i.mdx)("li",{parentName:"ul"},"If you pass ",(0,i.mdx)("inlineCode",{parentName:"li"},"with_inputs = True"),", you'll get back a ",(0,i.mdx)("inlineCode",{parentName:"li"},"cmd_args")," that expands to the JSON file but carries all the underlying inputs as dependencies (so you don't have to use, for example, ",(0,i.mdx)("inlineCode",{parentName:"li"},"hidden")," for them to be added to an action that already receives the JSON file)")))}m.isMDXComponent=!0}}]);