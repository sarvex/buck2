"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2009],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>s,MDXProvider:()=>x,mdx:()=>f,useMDXComponents:()=>o,withMDXComponents:()=>p});var l=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(){return u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&(e[l]=r[l])}return e},u.apply(this,arguments)}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,l,n=function(e,t){if(null==e)return{};var r,l,n={},u=Object.keys(e);for(l=0;l<u.length;l++)r=u[l],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(l=0;l<u.length;l++)r=u[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=l.createContext({}),p=function(e){return function(t){var r=o(t.components);return l.createElement(e,u({},t,{components:r}))}},o=function(e){var t=l.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},x=function(e){var t=o(e.components);return l.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},y=l.forwardRef((function(e,t){var r=e.components,n=e.mdxType,u=e.originalType,a=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=o(r),x=n,c=p["".concat(a,".").concat(x)]||p[x]||m[x]||u;return r?l.createElement(c,i(i({ref:t},s),{},{components:r})):l.createElement(c,i({ref:t},s))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var u=r.length,a=new Array(u);a[0]=y;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[c]="string"==typeof e?e:n,a[1]=i;for(var s=2;s<u;s++)a[s]=r[s];return l.createElement.apply(null,a)}return l.createElement.apply(null,r)}y.displayName="MDXCreateElement"},90090:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>u,metadata:()=>i,toc:()=>s});var l=r(87462),n=(r(67294),r(3905));const u={id:"uqueryctx"},a="uqueryctx type",i={unversionedId:"api/bxl/uqueryctx",id:"api/bxl/uqueryctx",title:"uqueryctx type",description:"The context for performing uquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within uquery command.",source:"@site/../docs/api/bxl/uqueryctx.generated.md",sourceDirName:"api/bxl",slug:"/api/bxl/uqueryctx",permalink:"/docs/api/bxl/uqueryctx",draft:!1,tags:[],version:"current",frontMatter:{id:"uqueryctx"},sidebar:"manualSidebar",previous:{title:"unconfigured_target_node type",permalink:"/docs/api/bxl/unconfigured_target_node"}},d={},s=[{value:"uqueryctx.allpaths",id:"uqueryctxallpaths",level:2},{value:"uqueryctx.attrfilter",id:"uqueryctxattrfilter",level:2},{value:"uqueryctx.attrregexfilter",id:"uqueryctxattrregexfilter",level:2},{value:"Details",id:"details",level:4},{value:"uqueryctx.buildfile",id:"uqueryctxbuildfile",level:2},{value:"Details",id:"details-1",level:4},{value:"uqueryctx.deps",id:"uqueryctxdeps",level:2},{value:"Details",id:"details-2",level:4},{value:"uqueryctx.eval",id:"uqueryctxeval",level:2},{value:"Details",id:"details-3",level:4},{value:"uqueryctx.filter",id:"uqueryctxfilter",level:2},{value:"Details",id:"details-4",level:4},{value:"uqueryctx.inputs",id:"uqueryctxinputs",level:2},{value:"Details",id:"details-5",level:4},{value:"uqueryctx.kind",id:"uqueryctxkind",level:2},{value:"Details",id:"details-6",level:4},{value:"uqueryctx.owner",id:"uqueryctxowner",level:2},{value:"Details",id:"details-7",level:4},{value:"uqueryctx.rdeps",id:"uqueryctxrdeps",level:2},{value:"Details",id:"details-8",level:4},{value:"uqueryctx.somepath",id:"uqueryctxsomepath",level:2},{value:"uqueryctx.testsof",id:"uqueryctxtestsof",level:2},{value:"Details",id:"details-9",level:4}],p={toc:s};function o(e){let{components:t,...r}=e;return(0,n.mdx)("wrapper",(0,l.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"uqueryctx-type"},(0,n.mdx)("inlineCode",{parentName:"h1"},"uqueryctx")," type"),(0,n.mdx)("p",null,"The context for performing ",(0,n.mdx)("inlineCode",{parentName:"p"},"uquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within uquery command."),(0,n.mdx)("h2",{id:"uqueryctxallpaths"},"uqueryctx.allpaths"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.allpaths(from: "", to: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The ",(0,n.mdx)("inlineCode",{parentName:"p"},"allpaths")," query for computing all dependency paths."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxattrfilter"},"uqueryctx.attrfilter"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.attrfilter(attr: str.type, value: str.type, targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The attrfilter query for rule attribute filtering."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxattrregexfilter"},"uqueryctx.attrregexfilter"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.attrregexfilter(attribute: str.type, value: str.type, targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The attrregexfilter query for rule attribute filtering with regex."),(0,n.mdx)("h4",{id:"details"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attrregexfilter(ctx):\n    filtered = ctx.uquery().attrregexfilter("foo", "he.lo", "bin/kind/...")\n    ctx.output.print(filtered)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxbuildfile"},"uqueryctx.buildfile"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.buildfile(targets: "") -> "file_set"\n')),(0,n.mdx)("p",null,"Find the build file(s) that defines a target or a target set."),(0,n.mdx)("h4",{id:"details-1"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _buildfile_impl(ctx):\n    owner = ctx.uquery().owner(["bin/TARGET", "bin/kind"])\n    result = ctx.uquery().buildfile(owner)\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxdeps"},"uqueryctx.deps"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.deps(universe: "", depth: [None, int.type] = None, filter: [None, str.type] = None) -> "target_set"\n')),(0,n.mdx)("p",null,"The deps query for finding the transitive closure of dependencies."),(0,n.mdx)("h4",{id:"details-2"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_deps(ctx):\n    result = ctx.uquery().deps("root//bin:the_binary", 1)\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxeval"},"uqueryctx.eval"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.eval(query: str.type, query_args: [None, ""] = None) -> ""\n')),(0,n.mdx)("p",null,"Evaluates some general query string, ",(0,n.mdx)("inlineCode",{parentName:"p"},"query_args")," can be a target_set of unconfigured nodes, or a list of strings."),(0,n.mdx)("h4",{id:"details-3"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result1 = ctx.uquery().eval("inputs(cell//path/to/file:target)")\n    ctx.output.print(result1)\n\n    result2 = ctx.uquery().eval("inputs(%s)", query_args = ["cell//path/to/file:target"])\n    ctx.output.print(result2)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxfilter"},"uqueryctx.filter"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.filter(regex: str.type, targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The filter query for filtering targets by name."),(0,n.mdx)("h4",{id:"details-4"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_filter(ctx):\n    result = ctx.uquery().filter(".*the_binary", "root//...")\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxinputs"},"uqueryctx.inputs"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.inputs(targets: "") -> "file_set"\n')),(0,n.mdx)("p",null,"The inputs query for finding input files."),(0,n.mdx)("h4",{id:"details-5"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_inputs(ctx):\n    result = ctx.uquery().inputs("root//bin:the_binary")\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxkind"},"uqueryctx.kind"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.kind(regex: str.type, targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The kind query for filtering targets by rule type."),(0,n.mdx)("h4",{id:"details-6"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_kind(ctx):\n    kind = ctx.uquery().kind(".*1", "bin/kind/...")\n    ctx.output.print(kind)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxowner"},"uqueryctx.owner"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.owner(files: [str.type, "file_set"]) -> "target_set"\n')),(0,n.mdx)("p",null,"The owner query for finding targets that own specified files."),(0,n.mdx)("h4",{id:"details-7"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _owner_impl(ctx):\n    owner = ctx.uquery().owner("bin/TARGETS.fixture")\n    ctx.output.print(owner)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxrdeps"},"uqueryctx.rdeps"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.rdeps(universe: "", from: "", depth: [None, int.type] = None) -> "target_set"\n')),(0,n.mdx)("p",null,"The rdeps query for finding the transitive closure of reverse dependencies."),(0,n.mdx)("h4",{id:"details-8"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rdeps(ctx):\n    result = ctx.uquery().rdeps("root//bin:the_binary", "//lib:file1", 100)\n    ctx.output.print(result)\n')),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxsomepath"},"uqueryctx.somepath"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.somepath(from: "", to: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The somepaths query, which returns the graph of nodes on some arbitrary path from a start to destination target."),(0,n.mdx)("hr",null),(0,n.mdx)("h2",{id:"uqueryctxtestsof"},"uqueryctx.testsof"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-python"},'def uqueryctx.testsof(targets: "") -> "target_set"\n')),(0,n.mdx)("p",null,"The testsof query for listing the tests of the specified targets."),(0,n.mdx)("h4",{id:"details-9"},"Details"),(0,n.mdx)("p",null,"Sample usage:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-text"},'def _testsof_impl(ctx):\n    result = ctx.uquery().testsof("//:foo_lib")\n    ctx.output.print(result)\n')))}o.isMDXComponent=!0}}]);